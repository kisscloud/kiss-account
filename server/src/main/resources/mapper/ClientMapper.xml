<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义一个映射配置文件的根节点 -->
<!-- namespace 属性用来定义配置命名空间， 主要进行 session 级别的缓存管理 -->
<!-- namespace 默认使用当前操作实体类的全路径 -->
<mapper namespace="com.kiss.account.mapper.ClientMapper">
    
    <select id="getClients" resultType="com.kiss.account.entity.Client">
        select id,clientName,clientId,lastAccessAt,status,createdAt,updatedAt from clients
    </select>

    <select id="getClientById" parameterType="java.lang.Integer" resultType="com.kiss.account.entity.Client">
        select id,clientName,clientId,lastAccessAt,status,createdAt,updatedAt from clients where id=#{id}
    </select>

    <insert id="createClient" useGeneratedKeys="true" keyProperty="id"  parameterType="com.kiss.account.entity.Client">
        insert into clients (clientName,clientId,clientSecret,lastAccessAt,status,operatorId,operatorName,operatorIp)
        value (#{clientName},#{clientId},#{clientSecret},#{lastAccessAt},#{status},#{operatorId},#{operatorName},#{operatorIp})
    </insert>
    
    <update id="updateClient" parameterType="com.kiss.account.entity.Client">
        update clients
        set
        id = #{id}
        <if test="clientName != null">
            ,clientName = #{clientName}
        </if>
        <if test="lastAccessAt != null">
            ,lastAccessAt = #{lastAccessAt}
        </if>
        <if test="status != null">
            ,status = #{status}
        </if>
        ,operatorId = #{operatorId}
        ,operatorName = #{operatorName}
        ,operatorIp = #{operatorIp}
        where id = #{id}
    </update>
    
    <delete id="deleteClientById" parameterType="java.lang.Integer">
        delete from clients where id = #{id}
    </delete>
    
    <select id="getClientSecretById" parameterType="java.lang.Integer" resultType="java.lang.String">
        select clientSecret from clients where id = #{id}
    </select>

    <select id="getClientByClientId" parameterType="java.lang.String" resultType="com.kiss.account.entity.Client">
        select * from clients where clientId = #{clientId};
    </select>
    
    <select id="getClientAccounts" parameterType="java.util.Map" resultType="com.kiss.account.entity.Account">
        select ac.name,ac.id from permissions per
        left join rolepermissions rp
        on per.id = rp.permissionId
        left join accountroles ar
        on rp.roleId = ar.roleId
        left join accounts ac
        on ar.accountId = ac.id
        where per.code = #{code} and ac.name is not null and ac.name like #{name};
    </select>
</mapper>