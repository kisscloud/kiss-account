<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 定义一个映射配置文件的根节点 -->
<!-- namespace 属性用来定义配置命名空间， 主要进行 session 级别的缓存管理 -->
<!-- namespace 默认使用当前操作实体类的全路径 -->
<mapper namespace="com.kiss.account.mapper.AccountMapper">

    <insert id="createAccount" useGeneratedKeys="true" keyProperty="id" parameterType="com.kiss.account.entity.Account">
        insert into accounts(name, username, email, mobile, password, salt, remark, groupId, status, operatorId, operatorName, operatorIp)
        values(#{name}, #{username}, #{email}, #{mobile}, #{password}, #{salt}, #{remark}, #{groupId}, #{status}, #{operatorId}, #{operatorName}, #{operatorIp});
    </insert>

    <select id="getAccountOutputById" parameterType="java.lang.Integer" resultType="com.kiss.account.output.AccountOutput">
        select account.id,account.name,account.username,account.email,account.mobile,
                account.remark,account.groupId,account.status,account.operatorName,
                account.operatorId,account.operatorIp,account.createdAt,account.updatedAt,gr.name as groupName
        from accounts account left join accountgroups gr
        on account.groupId = gr.id
        where account.id=#{id};
    </select>

    <select id="getAccountByUsername" parameterType="java.lang.String" resultType="com.kiss.account.entity.Account">
        select * from accounts where username=#{username};
    </select>

    <select id="getAccountByEmail" resultType="com.kiss.account.entity.Account">
        select * from accounts where email=#{email};
    </select>

    <select id="getAccountByMobile" resultType="com.kiss.account.entity.Account">
        select * from accounts where mobile=#{mobile};
    </select>

    <select id="getAccountByName" resultType="com.kiss.account.entity.Account">
        select * from accounts where name=#{name};
    </select>

    <select id="getAccounts" resultType="com.kiss.account.output.AccountOutput">
        select account.id,account.name,account.username,account.email,account.mobile,
                account.remark,account.groupId,account.status,account.operatorName,
                account.operatorId,account.operatorIp,account.createdAt,account.updatedAt,gr.name as groupName
        from accounts account left join accountgroups gr
        on account.groupId = gr.id
        order by account.createdAt
        <if test="size != 0">
            limit #{start},#{size}
        </if>

    </select>

    <insert id="bindRoleToAccount" useGeneratedKeys="true" keyProperty="id" parameterType="com.kiss.account.entity.AccountRole">
        insert into accountroles(roleId, accountId, operatorId, operatorName, operatorIp)
        values(#{roleId}, #{accountId}, #{operatorId}, #{operatorName}, #{operatorIp});
    </insert>

    <insert id="bindRolesToAccount" useGeneratedKeys="true" keyProperty="id" parameterType="java.util.List">
        insert into accountroles(roleId, accountId, operatorId, operatorName, operatorIp)
        values
        <foreach collection="list" item="role" index="index" separator=",">
            (#{role.roleId}, #{role.accountId}, #{role.operatorId}, #{role.operatorName}, #{role.operatorIp})
        </foreach>
    </insert>

    <select id="getAccountsCount" resultType="java.lang.Integer">
        select count(*) from accounts
    </select>

    <select id="getAccountByUniqueIdentification" resultType="com.kiss.account.entity.Account">
        select * from accounts where name=#{name} or username=#{username} or email=#{email} or mobile=#{mobile} limit 0,1
    </select>

    <update id="updateAccount" parameterType="com.kiss.account.output.AccountOutput">
        update accounts
        set id = #{id}
        <if test="name != null and name != ''">
            ,name = #{name,jdbcType=VARCHAR}
        </if>
        <if test="username != null and username != ''">
            ,username = #{username,jdbcType=VARCHAR}
        </if>
        <if test="email != null and email != ''">
            ,email = #{email,jdbcType=VARCHAR}
        </if>
        <if test="mobile != null and mobile != ''">
            ,mobile = #{mobile,jdbcType=VARCHAR}
        </if>
        <if test="groupId != null">
            ,groupId = #{groupId,jdbcType=INTEGER}
        </if>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateAccountPassword" parameterType="com.kiss.account.entity.Account">
        update accounts
        set id = #{id}
        <if test="password != null and password != ''">
            ,password = #{password,jdbcType=VARCHAR}
        </if>
        <if test="salt != null and salt != ''">
            ,salt = #{salt,jdbcType=VARCHAR}
        </if>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateAccountStatus" parameterType="com.kiss.account.output.AccountOutput">
        update accounts
        set id = #{id}
        <if test="status != null and status != ''">
            ,status = #{status,jdbcType=VARCHAR}
        </if>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <delete id="deleteAccountRoles" parameterType="java.lang.Integer">
        delete from accountroles where accountId = #{id}
    </delete>

    <select id="getAccountPermissions" parameterType="java.lang.Integer" resultType="java.lang.String">
        select p.code from accountroles ar left join rolepermissions  rp
        on ar.roleId = rp.roleId
        left join permissions p
        on rp.permissionId = p.id
        where ar.accountId=#{id}
    </select>

    <select id="getAccountById" parameterType="java.lang.Integer" resultType="com.kiss.account.entity.Account">
        select * from accounts where id=#{id}
    </select>

    <select id="getAccountPermissionDataScope" parameterType="java.util.Map" resultType="java.lang.String">
        select rp.dataScope from accountroles ar left join rolepermissions rp
        on ar.roleId = rp.roleId
        left join permissions pe
        on rp.permissionId = pe.id
        where ar.accountId = #{id} and pe.code = #{code} and rp.dataScope is not null
    </select>
</mapper>